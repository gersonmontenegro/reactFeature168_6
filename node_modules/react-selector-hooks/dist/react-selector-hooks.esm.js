import { useMemo } from 'react';

var createMemoSelector = function createMemoSelector(resolver) {
  return function (dependencies) {
    return useMemo(function () {
      return resolver.apply(void 0, dependencies);
    }, dependencies);
  };
};

var resolveResolvers = function resolveResolvers(resolvers, args) {
  return resolvers.map(function (resolver) {
    return resolver.apply(void 0, args);
  });
};

var createSelector = function createSelector(resolver) {
  var selector = createMemoSelector(resolver);
  return function () {
    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {
      dependencies[_key] = arguments[_key];
    }

    return selector(dependencies);
  };
};
var createStateSelector = function createStateSelector(dependencyResolvers, resolver) {
  var selector = createMemoSelector(resolver);
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return selector(resolveResolvers(dependencyResolvers, args));
  };
};
var createStructuredSelector = function createStructuredSelector(dependencyResolversMap, resolver) {
  var keys = Object.keys(dependencyResolversMap);
  var dependencyResolvers = keys.map(function (key) {
    return dependencyResolversMap[key];
  });
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var dependencies = resolveResolvers(dependencyResolvers, args);
    return useMemo(function () {
      return resolver(keys.reduce(function (value, key, index) {
        value[key] = dependencies[index];
        return value;
      }, {}));
    }, dependencies);
  };
};

export { createSelector, createStateSelector, createStructuredSelector };
